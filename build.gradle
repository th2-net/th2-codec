/*
 *  Copyright 2020-2022 Exactpro (Exactpro Systems Limited)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'signing'
}


ext {
    sharedDir          = file("${project.rootDir}/shared")
}

group 'com.exactpro.th2'
version release_version

repositories {
    maven {
        name 'MavenLocal'
        url sharedDir
    }

    mavenCentral()

    maven {
            name 'Sonatype_snapshots'
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }

    maven {
            name 'Sonatype_releases'
            url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

dependencies {
    api platform('com.exactpro.th2:bom:3.1.0')

    implementation 'com.exactpro.th2:common:3.35.0-TH2-3340-2049152746-SNAPSHOT'
    implementation 'com.exactpro.th2:grpc-codec:0.0.4-TH2-3340-2048915817-SNAPSHOT'

    implementation 'io.github.microutils:kotlin-logging:2.1.21'

    implementation 'org.slf4j:slf4j-api'
    implementation 'org.slf4j:slf4j-log4j12'

    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}'

    implementation("com.github.ajalt:clikt:2.8.0")

    implementation 'com.google.protobuf:protobuf-java-util'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:1.5.32"
    testImplementation "org.mockito.kotlin:mockito-kotlin:3.2.0"
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

// conditionals for publications
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.nexusRepository &&
            project.hasProperty('nexus_user') &&
            project.hasProperty('nexus_password') &&
            project.hasProperty('nexus_url')) ||
        (repository == publishing.repositories.sonatype &&
            project.hasProperty('sonatypeUsername') &&
            project.hasProperty('sonatypePassword')) ||
        (repository == publishing.repositories.localRepo)
    }
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signingKey') &&
        project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.whenTaskAdded {task ->
    if(task.name.equals('initializeSonatypeStagingRepository') &&
        !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
              name = rootProject.name
              packaging = 'jar'
              description = rootProject.description
              url = vcs_url
              scm {
                url = vcs_url
              }
              licenses {
                license {
                  name = 'The Apache License, Version 2.0'
                  url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
              }
              developers {
                developer {
                  id = 'developer'
                  name = 'developer'
                  email = 'developer@exactpro.com'
                }
              }
              scm {
                url = vcs_url
              }
            }
        }
    }
    repositories {
        maven {
            name = 'localRepo'
            url = sharedDir
        }
//Nexus repo to publish from gitlab
        maven {
            name = 'nexusRepository'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

clean {
    delete sharedDir
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}